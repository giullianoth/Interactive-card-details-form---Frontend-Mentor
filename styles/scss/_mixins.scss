// Including Browser Cores
@mixin setBrowserCores($attr, $value, $cores: $browser-cores-default) {
    #{$attr}: #{$value};

    @each $core in $cores {
        -#{$core}-#{$attr}: #{$value};
    }
}

// Set Box Sizing
@mixin boxSizing($value: border-box) {
    @include setBrowserCores(box-sizing, $value);
}

// Set Border Radius
@mixin borderRadius($value: $radius-default) {
    @include setBrowserCores(border-radius, $value);
}

// Set full width and height
@mixin fullContent() {
    width: 100%;
    height: 100%;
}

// Display Flex
@mixin flex($justifyContent: center, $alignItems: center, $flexWrap: wrap) {
    display: flex;
    justify-content: $justifyContent;
    align-items: $alignItems;
    flex-wrap: $flexWrap;
}

@mixin flexBasis($basis, $gap: 0) {
    @if $gap != 0 {
        flex-basis: calc($basis - $gap);
    }

    @else {
        flex-basis: $basis;
    }
}

// Position Relative
@mixin relative() {
    position: relative;
}

// Position Absolute
@mixin absolute($top: 0, $left: 0) {
    position: absolute;
    top: $top;
    left: $left;
}

@mixin absoluteFull() {
    @include absolute;
    @include fullContent;
}

@mixin absoluteDisplace($top: 50%, $left: 50%, $x: -50%, $y: -50%) {
    @include absolute($top, $left);
    transform: translate($x, $y);
}

// Background Image
@mixin backgroundImage($imagePath: "", $position: center center, $size: cover, $repeat: no-repeat) {
    @if $imagePath != "" {
        background-image: url($imagePath);
    }

    background-repeat: $repeat;
    background-size: $size;
    background-position: $position;
}

// Responsive Design
@mixin setResponsiveDesign($screenWidth) {
    @media screen and (max-width: $screenWidth) {
        @content;
    }
}

// Animation and Keyframes
@mixin animation($name, $setup, $duration: 1s, $iterationCount: infinite, $timingFunction: ease-in-out) {
    animation: $name $duration $iterationCount $timingFunction;
    
    @keyframes #{$name} {
        @for $i from 1 through length($list: $setup) {

            $frame: calc((($i * 100%) / (length($list: $setup) - 1)) - (100% / (length($list: $setup) - 1)));
            
            #{$frame} {
                @each $attr, $value in nth($list: $setup, $n: $i) {
                    #{$attr}: #{$value};
                }
            }
        }
    }
}

// Card Alert Animation
@mixin cardAlertAnimation($template, $xRef, $yRef) {
    @include animation(cardAlert#{$template}, (
        (transform: translate(calc($xRef - 10px), $yRef)),
        (transform: translate(calc($xRef + 10px), $yRef)),
        (transform: translate(calc($xRef - 10px), $yRef)),
        (transform: translate(calc($xRef + 10px), $yRef)),
        (transform: translate(calc($xRef - 10px), $yRef)),
        (transform: translate($xRef, $yRef))
    ), 0.3s, 1, ease-in-out);
}